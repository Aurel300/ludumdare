#!/usr/bin/env php
<?php
require_once __DIR__."/../../db.php";
require_once __DIR__."/../../core/internal/core.php";
require_once __DIR__."/../../core/node.php";
require_once __DIR__."/../../core/users.php";
require_once __DIR__."/../../core/schedule.php";

db_Connect();
echo "Connected: " . db_IsConnected() . "\n";

// NOTE: Indexes must be less than 767 bytes!
//   That means 255 (255.666~) for strings in UTF8 (UTF8mb3)
//   or 191 (191.75) for strings in UTF8mb4 (What I am using).
//   This *can* be bumped to 3072 with --innodb_large_prefix, but
//   the implications of this are not well understood (by me).

// https://dev.mysql.com/doc/refman/5.5/en/innodb-restrictions.html
// https://make.wordpress.org/core/2015/04/02/the-utf8mb4-upgrade/

// Consider using a simpler charset and coalation for slugs and slug-lookup tables (they only need ASCII 0-127)

// http://code.openark.org/blog/mysql/mysqls-character-sets-and-collations-demystified
		
	db_Query("DROP TABLE " . CMW_TABLE_NODE . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_META . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_DIFF . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_LOVE . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_NODE_STAR . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_USER . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_COMMENT . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_COMMENT_LOVE . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_SCHEDULE_TIMESPAN . ";",true);
	db_Query("DROP TABLE " . CMW_TABLE_SCHEDULE_SUBSCRIPTION . ";",true);
		
	db_Query("SET storage_engine=InnoDB;");
//	db_Query("SET collation_server=utf8_unicode_ci;");
//	db_Query("SET character_set_server=utf8;");
	
	const DBTYPE_INNODB = " ENGINE=InnoDB";
	const DBTYPE_MYISAM = " ENGINE=MyISAM";
	const DBTYPE_ARCHIVE = " ENGINE=Archive";
	// NOTE: utf8 is 3 byte unicode. utf8mb4 is 4 byte. Required for Emoji.
	const CSTYPE_UTF8 = " CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci";
	const CSTYPE_LATIN = " CHARACTER SET latin1 COLLATE latin1_swedish_ci";		// Case Insensitive
	//const CSTYPE_LATIN = " CHARACTER SET latin1 COLLATE latin1_bin";			// Case Sensitive
	
	// https://dev.mysql.com/doc/refman/5.5/en/case-sensitivity.html
	
	
	$dbtype_default = DBTYPE_INNODB . CSTYPE_UTF8;

	// id - The Unique ID of the Node
	// parent - Who I'm a child of (if anyone)
	// root - Who owns me (Node)
	// author - Who wrote and published the Node (not necessarily who changed it).
	// type - What are we (What kind of Node)?
	// time - Timestamps
	// slug - Clean name for URLs
	// name - Proper name
	// body - body or description

	// comment_count - How many Comments
	// love_count - How much Love
	// favourite_count - How many Favourites
	// popularity - some metric used to single out posts ** (may want to sort by)

	// meta_cache - cached list of references (metas) in JSON format.
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE . " (
			id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT 
				UNIQUE,
			parent BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (parent),
			author BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (author),

			type VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX (type),
			subtype VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
			
			time_created DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_modified DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_published DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
				INDEX (time_published),

			slug VARCHAR(64) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX parent_slug(parent,slug),
				INDEX author_slug(author,slug),
			name VARCHAR(191) NOT NULL DEFAULT '',
			body MEDIUMTEXT NOT NULL,

			
			comment_count INT NOT NULL DEFAULT 0,
			love_count INT NOT NULL DEFAULT 0,
			favourite_count INT NOT NULL DEFAULT 0,
			popularity INT NOT NULL DEFAULT 0,
			
			meta_cache TEXT NOT NULL,
			favourite_cache TEXT NOT NULL
		)" . $dbtype_default . ";");
	//			INDEX(root,parent,slug),

	// TODO: consider adding time_ping, which is a copy of the time_publish, but
	// supports being reassigned a time, while still remembering the publish time.
	// It's mainly used for Leagues, once a post breaks the popularity barier, 
	// ping it, so it gets highlighted.
	
	// Also, you should probably only PING a post that's not very old (30 minutes),
	// so again, knowing the Publish time is important.
	
	// Reserve the first 32 nodes for special use //
	$n = node_Add("root","","root","/root","",0,0);										// 1 (CMW_NODE_ROOT)
	$n = node_Add("settings","","user","/user","User Settings",0,CMW_NODE_ROOT);		// 2 (CMW_NODE_USER)
	$n = node_Add("admin","","admin","/admin","Admin Settings",0,CMW_NODE_ROOT);		// 3 (CMW_NODE_ADMIN)
//	$n = node_Add("proxy","","team","/team","",0,CMW_NODE_ROOT);						// x (CMW_NODE_TEAM)
//	$n = node_Add("proxy","","game","/game","",0,CMW_NODE_ROOT);						// x (CMW_NODE_GAME)
//	$n = node_Add("proxy","","demo","/demo","",0,CMW_NODE_ROOT);						// x (CMW_NODE_DEMO)
//	$n = node_Add("proxy","","craft","/craft","",0,CMW_NODE_ROOT);						// x (CMW_NODE_CRAFT)
//	$n = node_Add("proxy","","post","/post","",0,CMW_NODE_ROOT);						// x (CMW_NODE_POST)
//	$n = node_Add("proxy","","media","/media","",0,CMW_NODE_ROOT);						// x (CMW_NODE_MEDIA)
	for ( $idx = $n; $idx < 15; $idx++ ) {
		node_Add("null","","reserved-".($idx+1),"??","",0,0);
	}
	$n = node_Add("group","","event","Ludum Dare Events","",0,CMW_NODE_ROOT);			// 16 (CMW_NODE_EVENT)
	$n = node_Add("group","","platform","Platforms","",0,CMW_NODE_ROOT);				// 17 (CMW_NODE_PLATFORM)
	$n = node_Add("group","","tag","Tags","",0,CMW_NODE_ROOT);							// 18 (CMW_NODE_TAG)
	$n = node_Add("group","","tool","Tools","",0,CMW_NODE_ROOT);						// 19 (CMW_NODE_TOOL)
	$n = node_Add("group","","other","Other Games and Events","",0,CMW_NODE_ROOT);		// 20 (CMW_NODE_OTHER)
	$n = node_Add("group","","custom","Custom Events","",0,CMW_NODE_ROOT);				// 21 (CMW_NODE_CUSTOM)
	$n = node_Add("group","","extra","/extra","",0,CMW_NODE_ROOT);						// 22 (CMW_NODE_HOSTED)
	for ( $idx = $n; $idx < 31; $idx++ ) {
		node_Add("null","","reserved-".($idx+1),"??","",0,0);
	}

	$n = node_Add("group","","ld","Ludum Dare","",0,CMW_NODE_EVENT);					// 32 (CMW_NODE_EVENT_LD)
	$n = node_Add("group","","minild","MiniLD","",0,CMW_NODE_EVENT);					// 33 (CMW_NODE_EVENT_MINILD)
	$n = node_Add("group","","october","October Challenge","",0,CMW_NODE_EVENT);		// 34 (CMW_NODE_EVENT_OCTOBER)
	$n = node_Add("group","","scene","It's a secret to everyone","",0,CMW_NODE_EVENT);	// 35 (CMW_NODE_EVENT_SCENE)

	$n = node_Add("group","","game","Other Games","",0,CMW_NODE_OTHER);					// 36 (CMW_NODE_OTHER_GAME)
	$n = node_Add("group","","demo","Other Demos","",0,CMW_NODE_OTHER);					// 37 (CMW_NODE_OTHER_DEMO)
	$n = node_Add("group","","craft","Other Crafts","",0,CMW_NODE_OTHER);				// 38 (CMW_NODE_OTHER_CRAFT)
	$n = node_Add("group","","jam","Other Jam Games","",0,CMW_NODE_OTHER);				// 39 (CMW_NODE_OTHER_JAM)
	$n = node_Add("group","","scene","Other Demoscene Events","",0,CMW_NODE_OTHER);		// 40 (CMW_NODE_OTHER_SCENE)

	$n = node_Add("event","","dev","Development Tools","",0,CMW_NODE_TOOL);				// 41 (CMW_NODE_TOOL_DEV)
	$n = node_Add("event","","art","Art Tools","",0,CMW_NODE_TOOL);						// 42 (CMW_NODE_TOOL_ART)
	$n = node_Add("event","","content","Content Creation Tools","",0,CMW_NODE_TOOL);	// 43 (CMW_NODE_TOOL_CONTENT)
	$n = node_Add("event","","other","Other Tools","",0,CMW_NODE_TOOL);					// 44 (CMW_NODE_TOOL_OTHER)
	for ( $idx = $n; $idx < 63; $idx++ ) {
		node_Add("null","","reserved-".($idx+1),"??","",0,0);
	}

	// Calculate now //
	$latest_year = 2015;
	$latest_month = 7;

	$months = [
		"January",
		"February",
		"March",
		"April",
		"May",
		"June",
		"July",
		"August",
		"September",
		"October",
		"November",
		"December",
		"Smarch"
	];	
	// Add Historic Ludum Dare Events
	{
		// Ludum Dare Events //
		node_Add("event","","00","Ludum Dare 0 (24 Hour Event)","",0,CMW_NODE_EVENT_LD);
		$latest_event = 33;		// Main Event //
		for ( $idx = 1; $idx <= $latest_event; $idx++ ) {
			node_Add("event","", PADNUM($idx),"Ludum Dare ".$idx,"",0,CMW_NODE_EVENT_LD);
		}
		// Reserve up to Ludum Dare 48
		for ( $idx = $latest_event+1; $idx <= 48; $idx++ ) {
			node_Add("null","","".$idx,"Ludum Dare ".$idx,"(placeholder)",0,0);
		}

		// Relaxed Events (pre MiniLD) //
		node_Add("event","","ld08-5","Ludum Dare 8.5 (24 Hour Relaxed Event)","",0,CMW_NODE_EVENT_MINILD);
		node_Add("event","","ld10-5","Ludum Dare 10.5 (Relaxed Event)","",0,CMW_NODE_EVENT_MINILD);
		
		// MiniLD Events //
		$latest_event = 64;
		for ( $idx = 1; $idx <= $latest_event; $idx++ ) {
			node_Add("event","",PADNUM($idx),"MiniLD #".$idx,"",0,CMW_NODE_EVENT_MINILD);
		}
		
		// October Challenge Events //
		for ( $idx = 2010; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"October Challenge ".$idx,"",0,CMW_NODE_EVENT_OCTOBER);
		}

		// LD Scene Events //
		for ( $idx = 2015; $idx <= $latest_year; $idx++ ) {
			//node_Add("event","",$idx,"LD Scene ".$idx,"",0,CMW_NODE_EVENT_SCENE);
		}
	}
	
	// Add Historic Proxies //
	{
		node_Add("event","","1980s","Game from 1980-1989","",0,CMW_NODE_OTHER_GAME);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Game from ".$idx,"",0,CMW_NODE_OTHER_GAME);
		}
		node_Add("event","","unreleased","Unreleased Game","",0,CMW_NODE_OTHER_GAME);
		
		node_Add("event","","1980s","Demo/Intro/Cracktro from 1980-1989","",0,CMW_NODE_OTHER_DEMO);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Demo/Intro/Cracktro from ".$idx,"",0,CMW_NODE_OTHER_DEMO);
		}
		node_Add("event","","unreleased","Unreleased Demo/Intro/Cracktro","",0,CMW_NODE_OTHER_DEMO);

		node_Add("event","","1980s","Craft from 1980-1989","",0,CMW_NODE_OTHER_CRAFT);
		node_Add("event","","1990s","Craft from 1990-1999","",0,CMW_NODE_OTHER_CRAFT);
		for ( $idx = 2000; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Craft from ".$idx,"",0,CMW_NODE_OTHER_CRAFT);
		}		
		node_Add("event","","unreleased","Unreleased Craft","",0,CMW_NODE_OTHER_CRAFT);
	}
	
	// Add Other Game Jams //
	{
		$n = node_Add("group","","1gam","One Game a Month","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2013; $idx <= $latest_year; $idx++ ) {
			$n2 = node_Add("group","",$idx,"One Game a Month ".$idx,"",0,$n);
			//for ( $idx2 = 1; $idx2 <= (($idx===$latest_year) ? $latest_month : 12); $idx2++ ) {
			for ( $idx2 = 1; $idx2 <= 12; $idx2++ ) {
				node_Add("event","",PADNUM($idx2),"One Game a Month - ".$months[$idx2-1]." ".$idx,"",0,$n2);
			}
		}

		$n = node_Add("group","","itch-io","itch.io Hosted Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2014; $idx <= $latest_year; $idx++ ) {
			$n2 = node_Add("event","",$idx,"itch.io Hosted Jam ".$idx,"",0,$n);
//			for ( $idx2 = ($idx===2014?2:1); $idx2 <= 12; $idx2++ ) {
//				node_Add("event","",PADNUM($idx2),"itch.io - ".$months[$idx2-1]." ".$idx,"",0,$n2);
//			}
		}
	
	
		$n = node_Add("group","","pyweek","Python PyWeek","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 1; $idx <= 20; $idx++ ) {
			node_Add("event","",PADNUM($idx),"PyWeek ".$idx,"",0,$n);
		}
	
		$n = node_Add("group","","tojam","TOJam","Toronto Game Jam",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2006; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"TOJam ".$idx,"",0,$n);
		}
		$n = node_Add("group","","nordic-game-jam","Nordic Game Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2006; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Nordic Game Jam ".$idx,"",0,$n);
		}
		$n = node_Add("group","","no-more-sweden","No More Sweden","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2008; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"No More Sweden ".$idx,"",0,$n);
		}

		$n = node_Add("group","","global-game-jam","Global Game Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2009; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Global Game Jam ".$idx,"",0,$n);
		}

		$n = node_Add("group","","7dfps","7DFPS","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2012; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"7DFPS ".$idx,"",0,$n);
		}

		$n =node_Add("group","","7drl","7DRL","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2013; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"7DRL ".$idx,"",0,$n);
		}

		$n = node_Add("group","","speedhack","Allegro Speedhack","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 1999; $idx <= 2007; $idx++ ) {
			node_Add("event","",$idx,"Allegro Speedhack ".$idx,"",0,$n);
		}
		node_Add("event","","2009","Allegro Speedhack 2009","",0,$n);
		node_Add("event","","2011","Allegro Speedhack 2011","",0,$n);
		for ( $idx = 2014; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Allegro Speedhack ".$idx,"",0,$n);
		}

		// Historic //
		$n = node_Add("group","","indie-game-jam","Indie Game Jam","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 2002; $idx <= 2004; $idx++ ) {
			node_Add("event","",$idx,"Indie Game Jam ".$idx,"",0,$n);
		}
		
		// Other Game Jam by Year //
		node_Add("event","","1980s","Other Game Jam from 1980-1989","",0,CMW_NODE_OTHER_JAM);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Other Game Jam in ".$idx,"",0,CMW_NODE_OTHER_JAM);
		}
	}

	// Add Other Demoscene //
	{
		$n = node_Add("grou","","assembly","Assembly","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1992; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Assembly ".$idx,"",0,$n);
		}
		$n = node_Add("group","","revision","Revision","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 2011; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Revision ".$idx,"",0,$n);
		}

		// Historic //
		$n = node_Add("group","","breakpoint","Breakpoint","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 2003; $idx <= 2010; $idx++ ) {
			node_Add("event","",$idx,"Breakpoint ".$idx,"",0,$n);
		}
		$n = node_Add("group","","mekka-symposium","mekka & symposium","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1995; $idx <= 2002; $idx++ ) {
			node_Add("event","",$idx,"mekka & symposium ".$idx,"",0,$n);
		}
		$n = node_Add("group","","the-party","The Party","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1991; $idx <= 2002; $idx++ ) {
			node_Add("event","",$idx,"The Party ".$idx,"",0,$n);
		}
		$n = node_Add("group","","the-gathering","The Gathering","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1992; $idx <= 2001; $idx++ ) {
			node_Add("event","",$idx,"The Gathering ".$idx,"",0,$n);
		}

		// Other Demoscene Events by Year //
		node_Add("event","","1980s","Other Demoscene Event from 1980-1989","",0,CMW_NODE_OTHER_SCENE);
		for ( $idx = 1990; $idx <= $latest_year; $idx++ ) {
			node_Add("event","",$idx,"Other Demoscene Event in ".$idx,"",0,CMW_NODE_OTHER_SCENE);
		}
	}

	// Add Platforms //
	{
		$n = node_Add("platform","","windows","Windows","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ms-dos","MS-DOS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-3-1","Windows 3.1","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-95","Windows 95/98/ME","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-xp","Windows XP","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-7","Windows 7","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","winrt","Windows Runtime (WinRT/Metro, Windows 8+)","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-phone","Windows Phone","",0,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","android","Android","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ouya","Ouya","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","android-tv","Android TV","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","android-wear","Android Wear","",0,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","linux","Linux","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ubuntu","Ubuntu","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","debian","Debian","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","steamos","SteamOS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","fedora","Fedora/Redhat/CentOS","",$n,CMW_NODE_PLATFORM);
		//node_Add("platform","","opensuse","openSUSE","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","arch","Arch Linux","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","unix","Unix","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","freebsd","FreeBSD","",$n,CMW_NODE_PLATFORM);
		//node_Add("platform","","solaris","Solaris","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","mac-os","Mac OS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","osx","Mac OS X","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","ios","iOS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","iphone","Apple iPhone","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","ipad","Apple iPad","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","ipod","Apple iPod","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","watchos","watchOS","",0,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","web","Web","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","html5","HTML5","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","flash","Flash","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","unity","Unity Web Player","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","java","Java (web)","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","silverlight","Silverlight","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","chrome","Chrome","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","safari","Safari","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","opera","Opera","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","webkit","WebKit","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","internet-explorer","Internet Explorer","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","firefox","Firefox","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","netscape","Netscape","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","mosaic","Mosaic","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","chrome-os","Chrome OS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","firefox-os","Firefox OS","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","telnet","Telnet","",0,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","webos","WebOS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","webos-tv","WebOS TV","",$n,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","blackberry","BlackBerry","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","bb10","BlackBerry 10","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","symbian","Symbian","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","brew","Brew","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","j2me","J2ME","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","mophun","Mophun","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","palm-os","Palm OS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-ce","Windows CE","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","windows-mobile","Windows Mobile","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","bada","Bada","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","beos","BeOS/Haiku","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","kindle","Amazon Kindle (eReader)","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","nes","Nintendo Entertainment System/Famicom","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","snes","Super Nintendo Entertainment System/Super Famicom","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","n64","Nintendo 64","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","gamecube","Nintendo GameCube","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","wii","Nintendo Wii","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","wii-u","Nintendo Wii U","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","gameboy","Nintendo Game Boy","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","super-gameboy","Nintendo Super Game Boy","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","gameboy-color","Nintendo Game Boy Color","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","gameboy-advance","Nintendo Game Boy Advance","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","ds","Nintendo DS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","dsi","Nintendo DSi","",$n,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","3ds","Nintendo 3DS/2DS","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","new-3ds","New Nintendo 3DS","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","virtual-boy","Nintendo Virtual Boy","",0,CMW_NODE_PLATFORM);
		//node_Add("platform","","nx","Nintendo NX","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","psx","PlayStation","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps2","PlayStation 2","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps3","PlayStation 3","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps4","PlayStation 4","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","psp","PlayStation Portable","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","ps-vita","PlayStation Vita","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ps-tv","PlayStation TV/Vita TV","",$n,CMW_NODE_PLATFORM);

		node_Add("platform","","xbox","Xbox","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","xbox-360","Xbox 360","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","xbox-one","Xbox One","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","master-system","Sega Master System","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","game-gear","Sega Game Gear","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","genesis","Sega Genesis/Mega Drive","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","sega-cd","Sega CD/Mega-CD","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","32x","Sega 32X","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","saturn","Sega Saturn","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","dreamcast","Sega Dreamcast","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","vmu","Sega VMU","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","pc-engine","PC Engine/TurboGrafx-16","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","neo-geo","Neo Geo","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","neo-geo-pocket","Neo Geo Pocket","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","neo-geo-pocket-color","Neo Geo Pocket Color","",$n,CMW_NODE_PLATFORM);

		$n = node_Add("platform","","wonderswan","WonderSwan","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","wonderswan-color","WonderSwan Color/Crystal","",$n,CMW_NODE_PLATFORM);
		
		//node_Add("platform","","pet","Commodore PET","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","vic-20","Commodore VIC-20","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","c64","Commodore 64","",0,CMW_NODE_PLATFORM);
		//node_Add("platform","","c128","Commodore 128","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","amiga","Commodore Amiga","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","2600","Atari 2600","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","5200","Atari 5200","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","7800","Atari 7800","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","jaguar","Atari Jaguar","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","lynx","Atari Lynx","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","atari-st","Atari ST","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","zx-spectrum","ZX Spectrum","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","trs-80","Tandy TRS-80","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","coco","Tandy TRS-80 Color Computer","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","apple-ii","Apple II","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","bbc-micro","BBC Micro","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","amstrad-cpc","Amstrad CPC","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","msx","MSX","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","ti-83","TI-83 Calculator","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","vectrex","Vectrex","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","intellivision","Intellivision","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","colecovision","ColecoVision","",0,CMW_NODE_PLATFORM);
		$n = node_Add("platform","","odyssey","Magnavox Odyssey","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","odyssey2","Magnavox Odyssey²/Philips Videopac","",$n,CMW_NODE_PLATFORM);
		node_Add("platform","","cd-i","Philips CD-i","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","3do","3DO","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","fm-towns","FM Towns","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","arcade","Arcade","",0,CMW_NODE_PLATFORM);
		
		node_Add("platform","","arduino","Arduino","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","custom","Custom","",0,CMW_NODE_PLATFORM);

		node_Add("platform","","source","Source Code","",0,CMW_NODE_PLATFORM);
		node_Add("platform","","other","Other","",0,CMW_NODE_PLATFORM);
	}

	{
		$n = node_Add("tag","","vr","Virtual Reality","",0,CMW_NODE_TAG);
		node_Add("tag","","rift","Oculus Rift","",$n,CMW_NODE_TAG);
		node_Add("tag","","dk1","Oculus Rift DK1 (Dev Kit)","",$n,CMW_NODE_TAG);
		node_Add("tag","","dk2","Oculus Rift DK2 (Dev Kit)","",$n,CMW_NODE_TAG);
		node_Add("tag","","gear-vr","Samsung GearVR","",$n,CMW_NODE_TAG);
		node_Add("tag","","vive","HTC Vive","",$n,CMW_NODE_TAG);
		node_Add("tag","","steam-vr","Steam VR","",$n,CMW_NODE_TAG);
		node_Add("tag","","cardboard","Google Cardboard","",$n,CMW_NODE_TAG);

		node_Add("tag","","keyboard","Keyboard","",0,CMW_NODE_TAG);
		node_Add("tag","","mouse","Mouse","",0,CMW_NODE_TAG);
		node_Add("tag","","touch","Touch","",0,CMW_NODE_TAG);
		$n = node_Add("tag","","pen","Pressure Sensitive Pen/Stylus","",0,CMW_NODE_TAG);
		node_Add("tag","","wacom","Wacom Tablet","",$n,CMW_NODE_TAG);
		node_Add("tag","","printer","Printer","",0,CMW_NODE_TAG);
		$n = node_Add("tag","","microphone","Microphone","",0,CMW_NODE_TAG);
		node_Add("tag","","voice-recognition","Voice Recognition","",$n,CMW_NODE_TAG);

		$n = node_Add("tag","","game-pad","Game Pad","",0,CMW_NODE_TAG);
		node_Add("tag","","xbox-360-pad","Xbox 360 Game Pad","",$n,CMW_NODE_TAG);
		node_Add("tag","","xbox-one-pad","Xbox One Game Pad","",$n,CMW_NODE_TAG);
		node_Add("tag","","ps4-pad","PlayStation 4 Game Pad","",$n,CMW_NODE_TAG);
		node_Add("tag","","game-pad-required","Game Pad Required","",$n,CMW_NODE_TAG);
		node_Add("tag","","wiimote","Wiimote","",0,CMW_NODE_TAG);
		node_Add("tag","","ps-move","PlayStation Move Controller","",0,CMW_NODE_TAG);
		
		$n = node_Add("tag","","camera","Camera","",0,CMW_NODE_TAG);
		node_Add("tag","","ar","Augmented Reality","",$n,CMW_NODE_TAG);
		
		$n = node_Add("tag","","body-tracking","Body Tracking","",0,CMW_NODE_TAG);
		node_Add("tag","","kinect","Microsoft Kinect","",$n,CMW_NODE_TAG);
		node_Add("tag","","leap-motion","Leap Motion","",$n,CMW_NODE_TAG);
		node_Add("tag","","realsense","Intel RealSense","",$n,CMW_NODE_TAG);
		
		$n = node_Add("tag","","eye-tracking","Eye Tracking","",0,CMW_NODE_TAG);
		node_Add("tag","","tobii","Tobii EyeX/SteelSeries Sentry","",$n,CMW_NODE_TAG);
		node_Add("tag","","eye-tribe","Eye Tribe Tracker","",$n,CMW_NODE_TAG);
	
		$n = node_Add("tag","","multiplayer","Multiplayer","",0,CMW_NODE_TAG);
		node_Add("tag","","local-multiplayer","Local Multiplayer","",$n,CMW_NODE_TAG);
		node_Add("tag","","online-multiplayer","Online Multiplayer","",$n,CMW_NODE_TAG);

		node_Add("tag","","moddable","Moddable","",0,CMW_NODE_TAG);
		node_Add("tag","","mod","Mod","",0,CMW_NODE_TAG);
		
		$n = node_Add("tag","","accessible","Accessible","",0,CMW_NODE_TAG);
		node_Add("tag","","colorblind-mode","Colorblind Mode","",$n,CMW_NODE_TAG);
		node_Add("tag","","one-button","One Button Controls","",$n,CMW_NODE_TAG);
		node_Add("tag","","two-button","Two Buttons Controls","",$n,CMW_NODE_TAG);
		
		node_Add("tag","","platformer","Platformer","",0,CMW_NODE_TAG);
		$n = node_Add("tag","","role-playing","Role Playing","",0,CMW_NODE_TAG);
		node_Add("tag","","rpg-elements","RPG Elements","",$n,CMW_NODE_TAG);
		node_Add("tag","","fighting","Fighting","",0,CMW_NODE_TAG);
		node_Add("tag","","versus","Versus","",0,CMW_NODE_TAG);
		node_Add("tag","","crafting","Crafting","",0,CMW_NODE_TAG);
		node_Add("tag","","permadeath","Permadeath","",0,CMW_NODE_TAG);
		$n = node_Add("tag","","story","Story","",0,CMW_NODE_TAG);
		node_Add("tag","","visual-novel","Visual Novel","",$n,CMW_NODE_TAG);

		$n = node_Add("tag","","2d","2D","",0,CMW_NODE_TAG);
		node_Add("tag","","pixel-art","Pixel Art","",$n,CMW_NODE_TAG);
		$n = node_Add("tag","","3d","3D","",0,CMW_NODE_TAG);
		node_Add("tag","","voxel-art","Voxel Art","",$n,CMW_NODE_TAG);

		node_Add("tag","","spoilers","Spoilers","",0,CMW_NODE_TAG);
	}
	
	// Posts (everything) -- Get, is PUBLISHED=true, sort by PUBLISHED, LIMIT 10
	// Posts (popular) -- Get, is PUBLISHED=true, is LOVE >= 6 sort by PUBLISHED, LIMIT 10
	// Posts (favourites) -- Get Favourites (INT), is PUBLISHED=true, is AUTHOR=(IN Favourites), sort by PUBLISHED, LIMIT 10
	// Posts (league) -- Get, is PUBLISHED=true, is LEAGUE=value, sort PUBLISHED, LIMIT 10
	// Posts (hybrid) -- Combine the logic. Standard feed is Popular, Favourites and League
	// Comments -- For ItemID, get: PARENT=ItemID, TYPE="comment", is PUBLISHED=true, sort by PUBLISHED
	// Games -- Get EventID, is PUBLISHED=true, PARENT=EventID, etc...
	   // Combined Score
	   // By Coolness
	   // By Least Votes
	   // By SMARTS. No need to pull all 3000 games per request.
	// Download -- Parent=Game, Info=Platform, Body=URL, Name=Title (if not Parent name)
	
/*
	Post
		- 
	Game
		- Compo **
		- Jam **
		- Craft
		  - Board/Card
		  - Comic
		  - Music
		- Warmup
		- MiniLD
		- Wallpaper
		- Content
		- Tool
		- Post Compo
		- 
	Event (Group)
	Group
	User
	
	-------------------------
	
	root (Group)
		/user
		/event (Add code that lists all children)
		/tool
*/
	
	
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE_META . " (
			/* For Indexing Only, generally unused */
			_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT 
				UNIQUE,

			id_a BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX(id_a),
			id_b BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX(id_b),

			type VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX (type),
			subtype VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
			
			/*UNIQUE id_ab_type_subtype(id_a,id_b,type,subtype),*/
				
			data TEXT NOT NULL
		)" . $dbtype_default . ";");

/*
Thing {
	'author':{
		'creator':{
			'id':4098571,
			'text':""
		},
		'team':[
			{
				'id':385131,
				'text':""
			},
			{
				'id':4912,
				'text':""
			}
		],
		'stub':[
			{
				'text':"jummy"
			},
			{
				'text':"bibo"
			}
		]
	}	
};


Thing {
	'author':{
		'creator':4098571,
		'team':[
			385131,
			4912
		],
		'stub':[
			"jummy",
			"bibo"
		]
	}	
};


*/
	// USER
	// id 0 "avatar,image" "image.png"
	// id 0 "twitter,name" "mikekasprzak"
	// id 0 "twitch,name" "povrazor"
	// id 0 "twitch,id" "1920470160614"
	// id 0 "real,name" "Mike Kasprzak"
	// id 0 "jammer,real-name" "1"
	// id 0 "jammer,header" "1"
	// id 0 "jammer,dark-color" "842"
	// id 0 "jammer,light-color" "BD8"

	// team_id id "member," "admin"
	// team_id id "member," "contributor"
	// (foreach team with my id)
/*
	User {
		'avatar':{
			'image':'image.png'
		},
		'twitter':{
			'name':'mikekasprzak'
		},
		'twitch':{
			'name:'povrazor',
			'id':"1920470160614"
		},
		'real':{
			'name':"Mike Kasprzak"
		},
		'jammer':{
			real-name
			header
			dark-color
			light-color
		},
		'member':{ // No Subtype
			'192746':"contributor',
			'4424':"admin"
		}
	}
	
	Team {
		'member':{	// No Subtype
			'84":"admin",
			'8214":"contributor",
			'12740":"contributor",
			'13221":"contributor"
		}
	}
*/
	
	// id author_id "author,creator" ""              **STORE ID_B**
	
	// Need to be able to describe:
	// var->key->key = value
	// var->key[index] = value		(insert)
	// var->key[] = value			(push)
	
	// USER
	// id 0 0 "social,twitter,name" "mikekasprzak"			json[social][twitter][name]
	// id 0 0 "social,facebook,name" "chubby wubby"
	// id 0 0 "social,twitch,name" "povrazor"
	// id 0 0 "social,twitch,id" "1920470160614"
	// id 0 0 "avatar,," "image.png"	

	// Alternative format (dashes create namespaces)
	// id 0 0 "social-twitter,name" "mikekasprzak"			json['social']['twitter']['name']
	// id 0 0 "social-facebook,name" "chubby wubby"
	// id 0 0 "social-twitch,name" "povrazor"
	// id 0 0 "social-twitch,id" "1920470160614"
	
	// GAME
	   // Who worked on it? Who can edit it?
	// id author_id 0 "author,admin,[]" !author_id!           (can edit entry)
	// id author_id 0 "author,[admin]," !author_id!           
	// id author_id 0 "author,[admin],7" !author_id!           
	// id author_id 0 "author,contributor,[]" !author_id!     (only gets credit for it)
	// id 0 0         "author,stub,[]" "username"             (stub user, without an account)
	   // Authors are okay because they are global.

	   // Screenshots, Videos, Downloads //
	// id event_id 0  "media,shot,url" "http://blah.com/boo.png"
	// id event_id 0  "media,video,url" "http://youtube.com/blah"
	   // How do I find all Linux Games? HTML5 Games? Unity Player Games? Flash Games?
	   // How do I find all Unity Games?
	// id event_id tool_id "tool,," ""
	
	   // Embed Info //
	// id 0 640 "embed,width" "640"
	// id 0 480 "embed,height" "480"
	// id 0 0 "embed,url" "zeebra.com/mygame"
	// id 0 300 "embed,tw_width" "300"     (twitter embed width and height)
	// id 0 200 "embed,tw_hegiht" "200"

	   // How many Teams? How many Solo Devs?
	// an SQL query that does a count.
	   // All games made by teams?



	db_Query(
		"CREATE TABLE " . CMW_TABLE_COMMENT . " (
			id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
			parent BIGINT UNSIGNED NOT NULL DEFAULT 0,
			node BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (node),
				
			author BIGINT UNSIGNED NOT NULL DEFAULT 0,
				/*INDEX (author),*/
			
			time_created DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_modified DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
			time_published DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
				INDEX (time_published),

			body TEXT NOT NULL,

			/*comment_count INT NOT NULL DEFAULT 0,*/
			love_count INT NOT NULL DEFAULT 0 /*,*/
			/*favourite_count INT NOT NULL DEFAULT 0,*/
			/*popularity INT NOT NULL DEFAULT 0,*/
			
			/*meta_cache TEXT NOT NULL,*/
			/*favourite_cache TEXT NOT NULL*/
		)" . $dbtype_default . ";");

	
	// Private Data (Email, Password Hash). Never send these. //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_USER . " (
			node BIGINT UNSIGNED NOT NULL UNIQUE,
				INDEX(node),

			mail VARCHAR(191) NOT NULL UNIQUE,
				INDEX(mail),
				
			hash VARCHAR(128) NOT NULL
		)" . $dbtype_default . ";");

//			slug VARCHAR(64) CHARSET latin1 NOT NULL UNIQUE,
//				INDEX(slug),
	// NOTE: Slug must exactly match the slug of the Node with the same Id 

	// As of PHP 5.5, password_hash uses bcrypt which needs 60 chars.
	// Various articles recommend making it 255 chars, but as of 2015 we don't need it yet.
	// My compromise is to set it to 128 chars, though we don't need more than 64.
	// When PHP switches to a fancier algorithm, then we'll do an alter-table to add more space.

	
	{
		// Add Dummy User //
		$user_id = node_Add(
			'user',"",
			'pov','PoV',
			htmlspecialchars('I am the PoV. :smile:\n\nHear me PoV! :grin:\n\n```10 print "hello world"\n20 goto 10\n```\n:pizza:'),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'mike@sykhronics.com','blahblah');
		$pov_id = $user_id;
	
		// Add Dummy Games //
		node_Add(
			'game',"",
			'bearly-seasoned','Bearly:bear:Seasoned',
			"It's about a :bear:. The :bear: wants :fish:. Eat :fish: then go :house:.",
			$user_id,CMW_NODE_OTHER_GAME,
			true, 2200
		);
		node_Add(
			'game',"",
			'phat-js','Phat JS',
			"It's just phat",
			$user_id,CMW_NODE_OTHER_DEMO,
			true, 33
		);
		
		// Add Dummy Metadata //
		node_AddMeta($user_id,0,"twitter","","mikekasprzak");
		node_AddMeta($user_id,0,"twitch","name","povrazor");
		node_AddMeta($user_id,0,"twitch","id","1920470160614");
		node_AddMeta($user_id,0,"real","name","Mike Kasprzak");
		node_AddMeta($user_id,0,"jammer","real-name","1");
		node_AddMeta($user_id,0,"jammer","dark-color","428");
		node_AddMeta($user_id,0,"jammer","light-color","A9F");
		node_AddMeta($user_id,0,"jammer","header","1");
		node_AddMeta(4,$user_id,"member","","admin");

		node_AddMeta($user_id,0,"tv","default","twitch");
		node_AddMeta($user_id,0,"tv","chat","1");
		
		node_Add(
			'post','',
			"this-is-a-post","This is a post",
			htmlspecialchars("This is an *example* post.\n\nIt's here to demonstrate that yes, posts are still a thing.\n\n**NOTE:** Please ignore the styles and layout. I'm focusing on features, **NOT** the look.\n\nAll posted content, be it posts, comments, games, tools, really any piece of written content on the website is now written using **Markdown** (a GitHub styled one at that).\n\nWe also support Emoji and Emoji codes. Using `:bear: :dog: :dolphin:` outputs :bear: :dog: :dolphin:. For a complete list, visit [emoji.codes](http://emoji.codes). Eventually we will support auto-completion, and a library of gaming/gamedev specific Emoji codes, such as `:key-wasd: :key-arrows: :key-space: :key-a: :mouse-lmb: :xbox-y: :playstation-triangle:` for documenting your game controls.\n\nThat's pretty cool.\n\nYou can add source code too, and that source code gets highlighted.\n\n```\n10 PRINT \"Hello World\"\n20 GOTO 10\n```\nRemember GOTO? ;) \n\nYou can also *edit* and *patch* **any** piece of written content on the website, **ANY**, like a WIKI. But unlike a WIKI, changes need to be approved by either the original author, a member the team a thing is assigned to, or a moderator. I think that's pretty neato. Click the `PATCH` button to see the markdown code.\n\nFinally, I ... haven't figured out this last part yet."),
			$user_id,$user_id,
			true, 1182
		);
	}

	{
		node_Add(
			'page','',
			"rules","Rules :blowfish:",
			htmlspecialchars("These are the rules for Ludum Dare.\n\n**Rule #1:** No :airplane:\n\nMake sure you follow the rules."),
			CMW_NODE_ADMIN,CMW_NODE_ROOT,
			true
		);
		
		node_Add(
			'page','',
			"faq","FAQ :dolphin:",
			htmlspecialchars("facts for you"),
			CMW_NODE_ADMIN,CMW_NODE_ROOT,
			true
		);
		
		node_Add(
			'page','',
			"about","About :ca:",
			htmlspecialchars("Aboot"),
			CMW_NODE_ADMIN,CMW_NODE_ROOT,
			true
		);
	}
	
	{
		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'testuser','TestUser',
			htmlspecialchars("*This* is a test of the ~~emergency~~ `markdown :whale2:` system. This is `only a test :whale: :dolphin:`:whale:.\n\nBoop! :ship:\n\n# :blowfish:Blowfish:blowfish:\nThis is **important**.\n\n```\nfor ( var idx=0; idx < 10; idx++ ) {    /* :pig: */\n\tconsole.log(\"Hello World :turtle: :D (\"+idx+\")\\\\n\");\n}\n```\n\nCool 'eh? :dolphin: :(\n\n`:ox::blowfish:`\n\n:ox::blowfish:\n\n```\n:octopus:\n:horse:\n```\n\n```\n:octopus::horse:\n```\n\n`:octopus:\n:horse:`"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test@user.com','test');
		
		node_Add(
			'post','',
			"i-m-in","I'm in!",
			htmlspecialchars("I am a fake Ludum Dare participant, and though I am not real, **I am in!**\n\n:sailboat: :se: :D "),
			$user_id,$user_id,
			true, 4411
		);
		node_Add(
			'post','',
			"i-forgot","I forgot!",
			htmlspecialchars("Oh, and I'm using Python because :snake: :airplane:"),
			$user_id,$user_id,
			true, 5411
		);

		node_AddMeta($user_id,0,"twitch","name","monstercat");

		node_AddMeta($user_id,0,"tv","default","twitch");
		node_AddMeta($user_id,0,"tv","chat","0");
	}

	{
		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'hitboxer','Hitboxer',
			htmlspecialchars("This is a test user that uses Hitbox"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.hitbox@user.com','test');

		node_AddMeta($user_id,0,"hitbox","name","r1seTV");
		node_AddMeta($user_id,0,"tv","chat","1");
		

		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'beamer','Beamer',
			htmlspecialchars("This is a test user that uses Beam"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.beam@user.com','test');

		node_AddMeta($user_id,0,"beam","name","MartysGames");
		node_AddMeta($user_id,0,"tv","chat","1");


		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'youtuber','YouTuber',
			htmlspecialchars("This is a test user that uses YouTube"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.youtube@user.com','test');

		node_AddMeta($user_id,0,"youtube","name","smitegame");
		node_AddMeta($user_id,0,"tv","chat","1");


		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'mlger','MLGer',
			htmlspecialchars("This is a test user that uses MLG"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.mlg@user.com','test');

		node_AddMeta($user_id,0,"mlg","name","playcevo");
		node_AddMeta($user_id,0,"tv","chat","1");


		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'azubur','Azubur',
			htmlspecialchars("This is a test user that uses Azubu"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.azubu@user.com','test');

		node_AddMeta($user_id,0,"azubu","name","sirt");
		node_AddMeta($user_id,0,"tv","chat","1");


		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'dailymotioner','DailyMotioner',
			htmlspecialchars("This is a test user that uses DailyMotion"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.dailymotion@user.com','test');

		node_AddMeta($user_id,0,"dailymotion","name","LevelDownTV");
		node_AddMeta($user_id,0,"tv","chat","1");


		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'ustreamer','UStreamer',
			htmlspecialchars("This is a test user that uses UStream"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.ustream@user.com','test');

		node_AddMeta($user_id,0,"ustream","name","NASAHDTV");
		node_AddMeta($user_id,0,"ustream","id","6540154");
		node_AddMeta($user_id,0,"tv","chat","1");


		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'livestreamer','LiveStreamer',
			htmlspecialchars("This is a test user that uses LiveStream"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.livestream@user.com','test');

		node_AddMeta($user_id,0,"livestream","name","mysportlive");
		node_AddMeta($user_id,0,"livestream","id","2687950");
		node_AddMeta($user_id,0,"tv","chat","1");

		// More dummy users //
		$user_id = node_Add(
			'user',"",
			'redbuller','RedBuller',
			htmlspecialchars("This is a test user that uses Red Bull"),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'test.redbull@user.com','test');

		node_AddMeta($user_id,0,"redbull","","");
		node_AddMeta($user_id,0,"tv","chat","1");


		// Add Test User //
		$user_id = node_Add(
			'user',"",
			'quill18','Quill18',
			htmlspecialchars('Test user'),
			0,CMW_NODE_USER,
			true
		);	
		user_Add($user_id,'quill@18.com','blahblah');
		$quill_id = $user_id;

		node_AddMeta($user_id,0,"twitch","name","quill18");
		node_AddMeta($user_id,0,"youtube","name","quill18");

		node_AddMeta($user_id,0,"tv","default","twitch");
		node_AddMeta($user_id,0,"tv","chat","1");
	}

	{
		// Add Proxy Users //
		$user_id = node_Add(
			'user',"",
			'timelapse','The Timelapse Channel',
			htmlspecialchars('Watch Game Development Timelapse Videos!'),
			0,CMW_NODE_USER,
			true
		);	
		
		//node_AddMeta($user_id,0,"youtube","name","timelapse");

		node_AddMeta($user_id,0,"tv","default","playlist");
		node_AddMeta($user_id,0,"tv","playlist","some_id");
		node_AddMeta($user_id,0,"tv","chat","1");
	}
	
	// Love Table. If a user has given a +1 to something. //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE_LOVE . " (
			node BIGINT UNSIGNED NOT NULL,
				INDEX(node),
			user BIGINT UNSIGNED NOT NULL,
				INDEX node_user(node,user),
			ip INT UNSIGNED NOT NULL,
				UNIQUE node_user_ip(node,user,ip)
		)" . $dbtype_default . ";");
	// for IP queries, use INET_ATON() and INET_NTOA().
	// http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton
	// ipv6 forget about it for now //

	// Comment Love Table. If a user has given a +1 to something. //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_COMMENT_LOVE . " (
			comment BIGINT UNSIGNED NOT NULL,
				INDEX(comment),
			user BIGINT UNSIGNED NOT NULL,
				INDEX comment_user(comment,user),
			ip INT UNSIGNED NOT NULL,
				UNIQUE comment_user_ip(comment,user,ip)
		)" . $dbtype_default . ";");

	// Star Table. If a user has favourited something (so they can view it later). //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_NODE_STAR . " (
			node BIGINT UNSIGNED NOT NULL,
				INDEX(node),
			user BIGINT UNSIGNED NOT NULL,
				INDEX(user),
			UNIQUE node_user(node,user)
		)" . $dbtype_default . ";");
	// No need for an IP. Users only. //


//	$query = 
//		"CREATE TABLE " . $log_table . " (
//			node BIGINT UNSIGNED NOT NULL,
//			user BIGINT UNSIGNED NOT NULL,
//			ip INT UNSIGNED NOT NULL
//		) ENGINE=archive;";

	// Database Engines //
	// InnoDB (DairyBox Default) - 
	// MyISAM (Server Default) - 
	// Archive - 


	// Schedule //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_SCHEDULE_TIMESPAN . " (
			id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT 
				UNIQUE,
			parent BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (parent),

			author BIGINT UNSIGNED NOT NULL DEFAULT 0,
				
			priority FLOAT NOT NULL DEFAULT 0.0,
			
			type VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',
				INDEX (type),
			subtype VARCHAR(16) CHARSET latin1 NOT NULL DEFAULT '',

			start DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
				INDEX (start),
			end DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
				INDEX (end),

			name VARCHAR(191) NOT NULL DEFAULT '',
			extra TEXT NOT NULL
		)" . $dbtype_default . ";");

	// id       - unique id of this Schedule Node
	// parent   - if it's a child, then who's the parent? (otherwise 0)
	// priority - used to sort amongst children. FLOAT.
	//		We use the items with the lowest INTEGER part, and decide what to do given the FRACTION part.
	// type     - the type or class of event (NOTE: Trending events are separate.
	//		Leave blank if not an internal LD event, or a big worldwide event.
	//		In the unlikely case a big worldwide event conflicts with Ludum Dare (main event only), omit this.
	//		- ld
	//		- minild
	//		- october
	//		- ggj
	//		- 7dfps
	//		- etc...
	// subtype  - the subtype of the event. Typically only used by Ludum Dare to define certain time-blocks of an event.
	//		- season (the entire 8 week block)
	//		- countdown (the 5 week countdown to the event)
	//		- theme	(theme voting)
	//		- warmup (warmup weekend)
	// start - start date and time
	// end   - end date and time
	// name  - name of the event, including digits (i.e. Ludum Dare 33, Global Game Jam 2016)
	// extra - additional information stored in JSON format.
	//		'theme' - the theme of the event.
	//		'url' - url to more information about the event
	
	function MakeLudumDare( $number, $start_date, $theme_name ) {
		$ld_start_hour = " 9:00 PM America/New_York";

		$hour = 60*60;
		$day = 60*60*24;
		$week = 60*60*24*7;
		
		$ld_start = strtotime($start_date.$ld_start_hour);
		$ld_end = strtotime($start_date.$ld_start_hour)+($day*3);
		$ld_compo_end = $ld_end - ($hour*24);
		
		$ludumdare = schedule_Add(
			date(DATE_W3C,$ld_start),
			date(DATE_W3C,$ld_end),
			"Ludum Dare ".$number,
			[
				'theme' => $theme_name,
				'url' => 'https://ludumdare.com/ld/'.$number.'/',
				'countdown' => 1
			],
			"ld",""
		);

		// Warmup Weekend is a separate event (borrowing times) //
		schedule_Add(
			date(DATE_W3C,$ld_start - ($week*1) - ($day*1) - ($hour*12)),
			date(DATE_W3C,$ld_compo_end - ($week*1) + ($day*1) + ($hour*12)),
			"Warmup Weekend",
			[
				'info' => 'Practice for Ludum Dare '.$number,
				'url' => 'https://ludumdare.com/ld/'.$number.'/warmup/'
			],
			"warmup",""
		);
		
		$season_start = $ld_start - ($week*5) - ($hour*12);
		$season_end = $ld_end + ($week*3) + ($hour*2);

		// Entire block (the season)
		schedule_Add(
			date(DATE_W3C,$season_start),
			date(DATE_W3C,$season_end),
			"Ludum Dare Season ".$number,
			[],
			"ld","season",
			$ludumdare,
			100.0
		);

		schedule_Add(
			date(DATE_W3C,$season_start),
			date(DATE_W3C,$ld_end+($hour*12)),
			"Signup Window",
			[],
			"ld","signup",
			$ludumdare,
			1000.0
		);

		schedule_Add(
			date(DATE_W3C,$season_start),
			date(DATE_W3C,$ld_start),
			"Countdown to Ludum Dare ".$number,
			[
				'countdown' => 1
			],
			"ld","countdown",
			$ludumdare,
			10.0
		);
		schedule_Add(
			date(DATE_W3C,$ld_start - ($week*2)),
			date(DATE_W3C,$ld_start - ($hour)),
			"Theme Voting",
			[],
			"ld","theme",
			$ludumdare,
			5.0
		);
		
		// Submission Hours //
		schedule_Add(
			date(DATE_W3C,$ld_compo_end),
			date(DATE_W3C,$ld_compo_end + $hour),
			"Submission Hour",
			[
				'countdown' => 1
			],
			"ld","extra",
			$ludumdare,
			5.0
		);
		schedule_Add(
			date(DATE_W3C,$ld_end),
			date(DATE_W3C,$ld_end + $hour),
			"Submission Hour",
			[
				'countdown' => 1
			],
			"ld","extra",
			$ludumdare,
			5.0
		);

		// Add the Compo //
		$submit_window = schedule_Add(
			date(DATE_W3C,$ld_start),
			date(DATE_W3C,$ld_compo_end + ($hour*4)),
			"Compo Submission Window",
			[],
			"ld","submit",
			$ludumdare,
			1000.0
		);
		$event = schedule_Add(
			date(DATE_W3C,$ld_start),
			date(DATE_W3C,$ld_compo_end),
			"Compo",
			[
				'submit' => $submit_window,
				'type' => 'compo',
			],
			"ld","event",
			$ludumdare,
			500.0
		);
		schedule_SetExtra($submit_window,
			[
				'event' => $event,
				'type' => 'compo',
			]
		);
		
		// Add the Jam //
		$submit_window = schedule_Add(
			date(DATE_W3C,$ld_start),
			date(DATE_W3C,$ld_end + ($hour*12)),
			"Jam Submission Window",
			[],
			"ld","submit",
			$ludumdare,
			1000.0
		);
		$event = schedule_Add(
			date(DATE_W3C,$ld_start),
			date(DATE_W3C,$ld_end),
			"Jam",
			[
				'submit' => $submit_window,
				'type' => 'jam',
			],
			"ld","event",
			$ludumdare,
			500.0
		);
		schedule_SetExtra($submit_window,
			[
				'event' => $event,
				'type' => 'jam',
			]
		);
		
		// Judging Window //		
		schedule_Add(
			date(DATE_W3C,$ld_compo_end + ($hour*1)),
			date(DATE_W3C,$ld_end + ($week*3)),
			"Judging",
			[
				'countdown' => 1
			],
			"ld","judging",
			$ludumdare,
			10.0
		);
		
		return $ludumdare;
	}
	
	function MakeGlobalGameJam( $number, $start_date, $theme ) {
		$start_hour = " 5:00 PM Pacific/Honolulu";

		$hour = 60*60;
		$day = 60*60*24;
		$week = 60*60*24*7;
		
		$jam_start = strtotime($start_date.$start_hour);
		$jam_end = strtotime($start_date.$start_hour)+($day*2);
		
		$jam = schedule_Add(
			date(DATE_W3C,$jam_start),
			date(DATE_W3C,$jam_end),
			"Global Game Jam ".$number,
			[
				'theme' => $theme,
				//'url' => 'https://ludumdare.com/ld/'.$number.'/'
			],
			"ggj",""
		);

		// If 2016.. //
		if ( $number >= 2016 ) {		
			$jam = schedule_Add(
				date(DATE_W3C,$jam_start),
				date(DATE_W3C,$jam_end),
				"Jam @ Home ".$number,
				[
					'theme' => $theme,
					//'url' => 'https://ludumdare.com/ld/'.$number.'/'
				],
				"home",""
			);

	
			$submit_window = schedule_Add(
				date(DATE_W3C,$jam_start),
				date(DATE_W3C,$jam_end),
				"Submission Window",
				[],
				"home","submit",
				$jam,
				1000.0
			);
			$event = schedule_Add(
				date(DATE_W3C,$jam_start),
				date(DATE_W3C,$jam_end + ($hour*4)),
				"Entry",
				[
					'submit' => $submit_window,
					'type' => 'entry',
				],
				"home","event",
				$jam,
				500.0
			);
			schedule_SetExtra($submit_window,
				[
					'event' => $event,
					'type' => 'entry',
				]
			);
			
			schedule_Add(
				date(DATE_W3C,$jam_end),
				date(DATE_W3C,$jam_end + $hour),
				"Submission Hour",
				[],
				"home","extra",
				$jam,
				5.0
			);
		}
	}
	
	MakeGlobalGameJam( 2014, "January 24, 2014", "We don't see things as they are, we see them as we are." );
	$ld29 = MakeLudumDare( 29, "April 25, 2014", "Beneath the Surface" );
	$ld30 = MakeLudumDare( 30, "August 22, 2014", "Connected Worlds" );
	$ld31 = MakeLudumDare( 31, "December 5, 2014", "Entire Game on One Screen" );
	MakeGlobalGameJam( 2015, "January 23, 2015", "What do we do now?" );
	$ld32 = MakeLudumDare( 32, "April 17, 2015", "An Unconventional Weapon" );
	$ld33 = MakeLudumDare( 33, "August 21, 2015", "Potato Kittens" );
	//MakeLudumDare( 34, "December 25, 2015", "Beiber Feiber" );
	MakeGlobalGameJam( 2016, "January 29, 2016", "How is babby formed? How girl get pragnent?" );
	
	schedule_Add(
		date(DATE_W3C,time()+(60*3)),
		date(DATE_W3C,time()+(60*6)),
		"Upcoming Jam",
		[
			'theme' => "baking"
		],
		"uppy",""
	);


	// Schedule Subscriptions //
	db_Query(
		"CREATE TABLE " . CMW_TABLE_SCHEDULE_SUBSCRIPTION . " (
			id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT 
				UNIQUE,			
			user BIGINT UNSIGNED NOT NULL DEFAULT 0,
				INDEX (user),
			timespan BIGINT UNSIGNED NOT NULL DEFAULT 0
		)" . $dbtype_default . ";");

	// user - the user id the subscription belongs to
	// timespan - the id of the timespan being subscribed to
	
	schedule_AddSubscription($pov_id, $ld30);
	schedule_AddSubscription($pov_id, $ld33);
	schedule_AddSubscription($quill_id, $ld33);
	
	echo "Table Create's Done.\n";
?>